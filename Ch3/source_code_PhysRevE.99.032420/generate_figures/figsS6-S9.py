# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.3'
#       jupytext_version: 0.8.6
#   kernelspec:
#     display_name: Python [conda env:py27]
#     language: python
#     name: conda-env-py27-py
# ---

from __future__ import division
from scipy.integrate import cumtrapz
import sys
sys.path.append('../code')
sys.path.append('../generate_data/')
from pylab import *
from signalsmooth import smooth
import seaborn as sns
sns.set_style('white')
sns.set(style = "ticks", color_codes = True)
from matplotlib.gridspec import GridSpec
from mpl_toolkits.axes_grid.inset_locator import inset_axes

# +
# %matplotlib

from style_sheet import custom_style
custom_style()
mpl.rcParams['text.usetex'] = False
# -

uppers = map(chr, range(65, 91))

# # load data

# +
a = load('multivariate-normality-test-around-Om0.npz')
data_aroundOm, fake_aroundOm = a.f.data, a.f.fake #fake referring to surrogate data with same mean/variance

b = load('multivariate-normality-test-random-frequencies.npz')
data_random, fake_random = b.f.data, b.f.fake #fake referring to surrogate data with same mean/variance
# -

# # Figures S6-S9

# The figures can be generated by setting random_or_Om=1 for figures S6 and S7 (random_or_Om=1 for figures S8 and S9) and by setting mm_or_vm=0 for figures S6 and S8 (mm_or_vm=1 for figures S7 and S9).

# +
random_or_Om = 0
mm_or_vm = 0
real_or_imag = 0
data, fake = [data_random,data_aroundOm][random_or_Om], [fake_random,fake_aroundOm][random_or_Om], 
k_mod, mod = mm_or_vm, ['mm','vm'][mm_or_vm]
k_part,part = real_or_imag, ['real','imag'][real_or_imag]
                             
fig, axs = subplots(3,2, figsize = (6,7), sharey='row')
for i,ax in enumerate(flatten(axs)):
    ax.text(-.16, 1.06, uppers[i], size = 14, transform=ax.transAxes, weight  = 'bold')
for k_uni_rep,uni_rep in enumerate(['uni', 'rep']):
        d,f = atleast_1d(data)[0][mod][uni_rep][part], atleast_1d(fake)[0][mod][uni_rep][part]
        for score in [1,2,0]:
            #axs[score,k_uni_rep].set_title("{}".format(['henze p-value', 'Madrias score 1', 'Madrias score 2'][score]))
            axs[score,k_uni_rep].text(0.05, .93, "{}".format(['Mardia skewness', 'Mardia kurtosis', 'Henze-Zirkler'][score]), horizontalalignment='left', verticalalignment='top', transform=axs[score,k_uni_rep].transAxes, fontstyle='oblique')
            if k_uni_rep%2 == 0:
                    axs[score,k_uni_rep].set_ylabel("reference quantiles")
            if score == 2:
                axs[score,k_uni_rep].set_xlabel("data quantiles")
            
            qa, qb = sort(d[:,score]), sort(f[:,score]) #percentile(d[:,score],q = linspace(2,98,15)), percentile(f[:,score],q = linspace(2,98,15))
            axs[score,k_uni_rep].scatter(qa, qb, edgecolors = ['r','b'][mm_or_vm], facecolors='none')
            x = np.linspace(np.min((qa.min(),qb.min())), np.max((qa.max(),qb.max())))
            axs[score,k_uni_rep].plot(x,x, color="k", ls="--")
            axs[score,k_uni_rep].set_xlim(np.min((qa.min(),qb.min())), np.max((qa.max(),qb.max())))
            axs[score,k_uni_rep].set_ylim(np.min((qa.min(),qb.min())), np.max((qa.max(),qb.max())))
            
            axs[score,k_uni_rep].ticklabel_format(axis='both', style = 'sci', scilimits=(-1,3), useMathText=1)
            axs[0,0].set_title('varying sig.', color = ['r','b'][mm_or_vm], size=15)
            axs[0,1].set_title('repeating sig.', color = ['r','b'][mm_or_vm], size=15)

subplots_adjust(top=0.96,
bottom=0.081,
left=0.132,
right=0.975,
hspace=0.386,
wspace=0.17)
tight_layout()
show()
